<pre class="metadata">
Title: Streams Standard
Group: WHATWG
H1: Streams
Shortname: streams
Status: LS
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me, https://domenic.me/
Abstract: This specification provides APIs for creating, composing, and consuming streams of data.
Abstract: These streams are designed to map efficiently to low-level I/O primitives, and allow easy
Abstract: composition with built-in backpressure and queuing. On top of streams, the web platform can
Abstract: build higher-level abstractions, such as filesystem or socket APIs, while at the same time
Abstract: users can use the supplied tools to build their own streams which integrate well with those
Abstract: of the web platform.
Logo: https://resources.whatwg.org/logo-streams.svg
!Participate: <a href="https://github.com/whatwg/streams/issues/new">File an issue</a> (<a href="https://github.com/whatwg/streams/issues?state=open">open issues</a>)
!Participate: <a href="https://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!Version History: <a href="https://github.com/whatwg/streams/commits">https://github.com/whatwg/streams/commits</a>
!Version History: [SNAPSHOT-LINK]
!Version History: <a href="https://twitter.com/streamsstandard">@streamsstandard</a>
</pre>

<style>
  ol > li { margin: 0; }
  .note + .example, .note + .note { margin-top: 1em; }
</style>
<script src="https://resources.whatwg.org/file-issue.js" async></script>
<script src="https://resources.whatwg.org/commit-snapshot-shortcut-key.js" async></script>


<h2 id="intro">Introduction</h2>

<em>This section is non-normative.</em>

Large swathes of the web platform are built on streaming data: that is, data that is created, processed, and consumed
in an incremental fashion, without ever reading all of it into memory. The Streams Standard provides a common set of
APIs for creating and interfacing with such streaming data, embodied in <a>readable streams</a>,
<a>writable streams</a>, and <a>transform streams</a>.

This standard provides the base stream primitives which other parts of the web platform can use to expose their
streaming data. For example, [[FETCH]] could expose request bodies as a writable stream, or response bodies as a
readable stream. More generally, the platform is full of streaming abstractions waiting to be expressed as streams:
multimedia streams, file streams, interprocess communication, and more benefit from being able to process data
incrementally instead of buffering it all into memory and processing it in one go. By providing the foundation for
these streams to be exposed to developers, the Streams Standard enables use cases like:

<ul>
  <li> Video effects: piping a readable video stream through a transform stream that applies effects in real time.
  <li> Decompression: piping a file stream through a transform stream that selectively decompresses files from a
    <kbd>.tgz</kbd> archive, turning them into <code>img</code> elements as the user scrolls through an image gallery.
  <li> Image decoding: piping a HTTP response stream through a transform stream that decodes bytes into bitmap data,
    and then through another transform that translates bitmaps into PNGs. If installed inside the <code>fetch</code>
    hook of a service worker [[SERVICE-WORKERS]], this would allow developers to transparently polyfill new image
    formats.
</ul>

The APIs described here provide unifying abstraction for all such streams, encouraging an ecosystem to grow around
these shared and composable interfaces. At the same time, they have been carefully designed to map efficiently to
low-level I/O concerns, and to encapsulate the trickier issues (such as <a>backpressure</a>) that come along for the
ride.

<h2 id="model">Model</h2>

A <dfn>chunk</dfn> is a single piece of data that is written to or read from a stream. It can be of any type; streams
can even contain chunks of different types. A chunk will often not be the most atomic unit of data for a given stream;
for example a binary stream might contain chunks consisting of 16 KiB <code>ArrayBuffer</code>s, instead of single
bytes.

<h3 id="rs-model">Readable Streams</h3>

A <dfn>readable stream</dfn> represents a source of data, from which you can read. In other words, data comes
<em>out</em> of a readable stream.

Although a readable stream can be created with arbitrary behavior, most readable streams wrap a lower-level I/O source,
called the <dfn>underlying source</dfn>. There are two types of underlying source: push sources and pull sources.

<dfn lt="push source">Push sources</dfn> push data at you, whether or not you are listening for it. They may also
provide a mechanism for pausing and resuming the flow of data. An example push source is a TCP socket, where data is
constantly being pushed from the OS level, at a rate that can be controlled by changing the TCP window size.

<dfn lt="pull source">Pull sources</dfn> require you to request data from them. The data may be available
synchronously, e.g. if it is held by the operating system's in-memory buffers, or asynchronously, e.g. if it has to be
read from disk. An example pull source is a file handle, where you seek to specific locations and read specific amounts.

Readable streams are designed to wrap both types of sources behind a single, unified interface.

<a>Chunks</a> are enqueued into the stream by the stream's <a>underlying source</a>. They can then be read one at a
time via the stream's public interface.

Code that reads from a readable stream using its public interface is known as a <dfn>consumer</dfn>.

<h3 id="ws-model">Writable Streams</h3>

A <dfn>writable stream</dfn> represents a destination for data, into which you can write. In other words, data goes
<em>in</em> to a writable stream.

Analogously to readable streams, most writable streams wrap a lower-level I/O sink, called the
<dfn>underlying sink</dfn>. Writable streams work to abstract away some of the complexity of the underlying sink, by
queuing subsequent writes and only delivering them to the underlying sink one by one.

<a>Chunks</a> are written to the stream via its public interface, and are passed one at a time to the stream's
<a>underlying sink</a>.

Code that writes into a writable stream using its public interface is known as a <dfn>producer</dfn>.

<h3 id="ts-model">Transform Streams</h3>

A <dfn>transform stream</dfn> consists of a pair of streams: a writable stream, and a readable stream.
In a manner specific to the transform stream in question, writes to the writable side result in new data being made
available for reading from the readable side.

Some examples of transform streams include:

<ul>
  <li>A GZIP compressor, to which uncompressed bytes are written and from which compressed bytes are read;</li>
  <li>A video decoder, to which encoded bytes are writen and from which uncompressed video frames are read;</li>
  <li>A text decoder, to which bytes are written and from which strings are read;</li>
  <li>A CSV-to-JSON converter, to which strings representing lines of a CSV file are written and from which
    corresponding JavaScript objects are read.
</ul>

<h3 id="pipe-chains">Pipe Chains and Backpressure</h3>

Streams are primarily used by <dfn>piping</dfn> them to each other. A readable stream can be piped directly to a
writable stream, or it can be piped through one or more transform streams first.

A set of streams piped together in this way is referred to as a <dfn>pipe chain</dfn>. In a pipe chain, the
<dfn>original source</dfn> is the <a>underlying source</a> of the first readable stream in the chain; the
<dfn>ultimate sink</dfn> is the <a>underlying sink</a> of the final writable stream in the chain.

Once a pipe chain is constructed, it can be used to propagate signals regarding how fast <a>chunks</a> should flow
through it. If any step in the chain cannot yet accept chunks, it propagates a signal backwards through the pipe chain,
until eventually the original source is told to stop producing chunks so fast. This process of normalizing flow from
the original source according to how fast the chain can process chunks is called <dfn>backpressure</dfn>.

<h3 id="queuing-strategies">Internal Queues and Queuing Strategies</h3>

Both readable and writable streams maintain <dfn>internal queues</dfn>, which they use for similar purposes. In the
case of a readable stream, the internal queue contains <a>chunks</a> that have been enqueued by the <a>underlying
source</a>, but not yet read by the consumer. In the case of a writable stream, the internal queue contains
<a>chunks</a> which have been written to the stream by the producer, but not yet processed and acknowledged by the
<a>underlying sink</a>.

A <dfn>queuing strategy</dfn> is a pair of methods that help determine whether a stream should apply
<a>backpressure</a> based on the state of its <a>internal queue</a>. The queuing strategy assigns a size to each
<a>chunk</a>; later, the stream implementation asks the queuing strategy whether the stream should apply backpressure,
based the total size of all chunks in the stream's internal queue.

<div class="example">
  A simple example of a queuing strategy would be one that assigns a size of one to each chunk, and applies
  backpressure whenever three or more chunks are in the internal queue. This would mean that up to three chunks could
  be enqueued in a readable stream, or three chunks could be written to a writable stream, before they send a
  backpressure signal.
</div>

A queuing strategy is generally associated with a specific type of <a>underlying source</a> or <a>underlying sink</a>.

<h3 id="locking">Locking</h3>

<!-- TODO: writable streams too, probably -->

An <dfn>exclusive stream reader</dfn> or simply reader is an object that encapsulates a <a>readable stream</a>,
preventing access to the stream except through the reader's interface. We say in this case the stream is
<dfn lt="locked to a reader">locked to the reader</dfn>, and that the reader is
<dfn lt="active reader">active</dfn>. A readable stream can have at most one reader at a time.

The reader presents most of the stream's interface, but while it is active, only the reader's methods and properties
can be used to successfully manipulate and interrogate the state of the stream; when the stream is used directly, it
appears as if it is empty.

A reader also has the capability to <dfn lt="release a read lock">release its read lock</dfn>, which makes it no
longer active. At this point the original stream can be used as before, and the reader becomes inert. If the
encapsulated stream becomes closed or errored as a result of the behavior of its <a>underlying source</a>, any
associated reader will automatically release its lock.

<h2 id="rs">Readable Streams</h2>

<h3 id="rs-intro">Using Readable Streams</h3>

<div class="example">
  The simplest way to consume a readable stream is to simply <a lt="piping">pipe</a> it to a <a>writable stream</a>.
  This ensures that <a>backpressure</a> is respected, and any errors (either writing or reading) are propagated through
  the chain:

  <pre><code class="lang-javascript">
    readableStream.pipeTo(writableStream)
      .then(() => console.log("All data successfully written!"))
      .catch(e => console.error("Something went wrong!", e));
  </code></pre>
</div>

<div class="example">
  Although readable streams will usually be used by piping them to a writable stream, you can also read them directly,
  using their <code>read()</code> method to get successive chunks. For example, this function writes the contents of a
  readable stream to the console as fast as they are available.

  <pre><code class="lang-javascript">
    function logChunks(readableStream) {
      return readable.read().then(chunk => {
        if (chunk !=== ReadableStream.EOS) {
          console.log(chunk);
          return logChunks(readableStream);
        }
      }
    }

    logChunks(readableStream)
      .then(() => console.log("--- all done!"))
      .catch(e => console.error("!!! error reading from the stream", e));
  </code></pre>
</div>

<h3 id="rs-class">Class <code>ReadableStream</code></h3>

<h4 id="rs-class-definition">Class Definition</h4>

<em>This section is non-normative.</em>

If one were to write the <code>ReadableStream</code> class in something close to the syntax of [[!ECMASCRIPT]], it
would look like

<pre><code class="lang-javascript">
  class ReadableStream {
    constructor(underlyingSource = {})

    get closed()
    get state()

    cancel(reason)
    getReader()
    pipeThrough({ writable, readable }, options)
    pipeTo(dest, { preventClose, preventAbort, preventCancel } = {})
    read()
  }
</code></pre>

<h4 id="rs-internal-slots">Internal Slots</h4>

Instances of <code>ReadableStream</code> are created with the internal slots described in the following table:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[close]]
    <td>A <a>Readable Stream Close Function</a> created with the ability to close this stream
  </tr>
  <tr>
    <td>\[[closedPromise]]
    <td>A promise that becomes fulfilled when the stream becomes <code>"closed"</code>; returned by the
      <code>closed</code> getter
  </tr>
  <tr>
    <td>\[[draining]]
    <td>A boolean flag indicating whether the stream has been closed, but still has chunks in its internal queue that
      have not yet been read
  </tr>
  <tr>
    <td>\[[enqueue]]
    <td>A <a>Readable Stream Enqueue Function</a> created with the ability to enqueue a passed <a>chunk</a> in this
      stream
  </tr>
  <tr>
    <td>\[[error]]
    <td>A <a>Readable Stream Error Function</a> created with the ability to move this stream to an
      <code>"errored"</code> state
  </tr>
  <tr>
    <td>\[[pullScheduled]]
    <td>A boolean flag set to <b>true</b> when the underlying source's <code>pull</code> method is scheduled to be
      called again after the current call to it finishes
  </tr>
  <tr>
    <td>\[[pullingPromise]]
    <td>A promise returned by the <a>underlying source</a>'s <code>pull</code> method, stored so that the stream can
      re-pull when it fulfills
  </tr>
  <tr>
    <td>\[[queue]]
    <td>A List representing the stream's internal queue of <a>chunks</a>
  </tr>
  <tr>
    <td>\[[readableStreamReader]]
    <td>A <code>ExclusiveStreamReader</code> instance, if the stream is locked to an exclusive reader, or
      <b>undefined</b> if it is not
  </tr>
  <tr>
    <td>\[[readyPromise]]
    <td>A promise returned by the <code>ready</code> getter
  </tr>
  <tr>
    <td>\[[started]]
    <td>A boolean flag indicating whether the <a>underlying source</a> has finished starting
  </tr>
  <tr>
    <td>\[[state]]
    <td>A string containing the stream's current state; returned by the <code>state</code> getter
  </tr>
  <tr>
    <td>\[[storedError]]
    <td>A value indicating how the stream failed, to be given as a failure reason or exception when trying to operate
      on the stream while in the <code>"errored"</code> state
  </tr>
  <tr>
    <td>\[[underlyingSource]]
    <td>An object representation of the stream's <a>underlying source</a>, including its <a>queuing strategy</a>; also
      used for the <a href="#is-readable-stream">IsReadableStream</a> brand check
  </tr>
</table>

<h4 id="rs-constructor">new ReadableStream(underlyingSource = {})</h4>

<div class="note">
  The <var>underlyingSource</var> object passed to the constructor can implement any of the following methods to
  govern how the constructed stream instance behaves:

  <ul>
    <li> <code>start(enqueue, close, error)</code> is called immediately, and is typically used to adapt a <a>push
      source</a> by setting up relevant event listeners, or to acquire access to a <a>pull source</a>. If this process
      is asynchronous, it can return a promise to signal success or failure.
    <li> <code>pull(enqueue, close)</code> is called when the stream's internal queue of chunks is depleted, and the
      consumer has signaled that they wish to consume more data. If <code>pull</code> returns a promise, then it will
      not be called again until the promise returned by the previous call has fulfilled; if the promise rejects, the
      stream will become errored.
    <li> <code>cancel(reason)</code> is called when the consumer signals that they are no longer interested in the
      stream. It should perform any actions necessary to release access to the <a>underlying source</a>. If this
      process is asynchronous, it can return a promise to signal success or failure.
  </ul>

  Both <code>start</code> and <code>pull</code> are given the ability to manipulate the stream's internal queue and
  state via the passed <code>enqueue</code>, <code>close</code>, and <code>error</code> callbacks. This is an example
  of the <a href="https://blog.domenic.me/the-revealing-constructor-pattern/">revealing constructor pattern</a>.

  The underlying source can also have a <code>strategy</code> property containing a <a>queuing strategy</a> object with
  two methods <code>shouldApplyBackpressure(queueSize)</code> and <code>size(chunk)</code>. These could be instances of
  the built-in <code>CountQueuingStrategy</code> or <code>ByteLengthQueuingStrategy</code> classes, or custom strategy
  objects. If no strategy is supplied, the default behavior will be to apply backpressure (via the return value of
  <code>enqueue</code>) when enqueuing into a non-empty queue.
</div>

<ol>
  <li> Set <b>this</b>@\[[underlyingSource]] to <var>underlyingSource</var>.
  <li> Set <b>this</b>@\[[readyPromise]] and <b>this</b>@\[[closedPromise]] to new promises.
  <li> Set <b>this</b>@\[[queue]] to a new empty List.
  <li> Set <b>this</b>@\[[state]] to <code>"waiting"</code>.
  <li> Set <b>this</b>@\[[started]], <b>this</b>@\[[draining]], and <b>this</b>@\[[pullScheduled]] to <b>false</b>.
  <li> Set <b>this</b>@\[[readableStreamReader]] to <b>undefined</b>.
  <li> Set <b>this</b>@\[[enqueue]] to CreateReadableStreamEnqueueFunction(<b>this</b>).
  <li> Set <b>this</b>@\[[close]] to CreateReadableStreamCloseFunction(<b>this</b>).
  <li> Set <b>this</b>@\[[error]] to CreateReadableStreamErrorFunction(<b>this</b>).
  <li> Let <var>startResult</var> be InvokeOrNoop(<var>underlyingSource</var>, <code>"start"</code>,
    «‍<b>this</b>@\[[enqueue]], <b>this</b>@\[[close]], <b>this</b>@\[[error]]»).
  <li> ReturnIfAbrupt(<var>startResult</var>).
  <li> Resolve <var>startResult</var> as a promise:
    <ol>
      <li> Upon fulfillment,
        <ol>
          <li> Set <b>this</b>@\[[started]] to <b>true</b>.
          <li> Return CallReadableStreamPull(<b>this</b>).
        </ol>
      <li> Upon rejection with reason <var>r</var>, call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>,
        «‍<var>r</var>»).
    </ol>
</ol>

<h4 id="rs-prototype">Properties of the <code>ReadableStream</code> Prototype</h4>

<h5 id="rs-closed">get closed</h5>

<div class="note">
  The <code>closed</code> getter returns a promise that will be fulfilled when the stream becomes closed, or rejected
  if it ever errors.
</div>

<ol>
  <li> If IsReadableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> Return <b>this</b>@\[[closedPromise]].
</ol>

<h5 id="rs-ready">get ready</h5>

<div class="note">
  The <code>ready</code> getter returns a promise that will be fulfilled when the stream transitions away from the
  <code>"waiting"</code> state to any other state. Once the stream transitions back to <code>"waiting"</code>, the
  getter will return a new promise that stays pending until the next state transition.
</div>

<ol>
  <li> If IsReadableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> Return <b>this</b>@\[[readyPromise]].
</ol>

<h5 id="rs-state">get state</h5>

<div class="note">
  The <code>state</code> getter returns the state of the stream, which will be one of the following:

  <dl>
    <dt><code>"waiting"</code>
    <dd>The stream's internal queue is empty; use <code>.ready</code> to be notified of any changes.

    <dt><code>"readable"</code>
    <dd>The stream's internal queue has <a>chunks</a> available; call <code>.read()</code> to retrieve the next one.

    <dt><code>"closed"</code>
    <dd>All data has been successfully read from the stream, and no more is available.

    <dt><code>"errored"</code>
    <dd>An error occurred interacting with the <a>underlying source</a>, and so the stream is now dead.
  </dl>

  If the stream is <a>locked to a reader</a>, the stream will appear to be <code>"waiting"</code>.

  The way in which the stream will transition between states is summarized in more detail in [[#rs-state-diagram]].
</div>

<ol>
  <li> If IsReadableStream(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> If IsReadableStreamLocked(<b>this</b>) is <b>true</b>, return <code>"waiting"</code>.
  <li> Return <b>this</b>@\[[state]].
</ol>

<h5 id="rs-cancel">cancel(reason)</h5>

<div class="note">
  The <code>cancel</code> method signals a loss of interest in the stream by a consumer. Calling it will immediately
  move the stream to a <code>"closed"</code> state, throwing away any queued data, as well as executing any
  cancellation mechanism of the <a>underlying source</a>.

  Readable streams cannot be cancelled while <a>locked to a reader</a>; this method will return a rejected promise.
</div>

<ol>
  <li> If IsReadableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> If IsReadableStreamLocked(<b>this</b>) is <b>true</b>, return a new promise rejected with a <b>TypeError</b>
    exception.
  <li> Return CancelReadableStream(<b>this</b>, <var>reason</var>).
</ol>

<h5 id="rs-get-reader">getReader()</h5>

<div class="note">
  The <code>getReader</code> method creates an <a>exclusive stream reader</a> and
  <a lt="locked to a reader">locks</a> the stream to the the new reader. While the stream is locked, it cannot be
  manipulated directly, and will appear to be an inert, empty stream waiting for new <a>chunks</a> to be enqueued.
  Instead, the returned reader object can be used to read from or cancel the stream, or to discern its state and state
  transitions. If or when the lock is <a lt="release a read lock">released</a>, the stream can be used again as
  normal.

  This functionality is especially useful for creating abstractions that desire the ability to consume a stream in its
  entirety. By getting a reader for the stream, you can ensure nobody else can interleave reads with yours, interfering
  with your abstraction or observing its side-effects.

  Note that when a stream is closed or errors, any reader it is locked to is automatically released.
</div>

<ol>
  <li> If IsReadableStream(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> Return AcquireExclusiveStreamReader(<b>this</b>).
</ol>

<div class="example">
  An example of an abstraction that might benefit from using an exclusive reader is a function like the following,
  which is designed to read an entire readable stream into memory as an array of <a>chunks</a>.

  <pre><code class="lang-javascript">
    function readAllChunks(readableStream) {
      const reader = readableStream.getReader();
      const chunks = [];

      return pump();

      function pump() {
        return readable.read().then(chunk => {
          if (chunk === ReadableStream.EOS) {
            return chunks;
          }

          chunks.push(chunk);
          return pump();
        });
      }
    }
  </code></pre>

  Note how the first thing it does is obtain a reader, and from then on it uses the reader exclusively.
</div>

<h5 id="rs-pipe-through">pipeThrough({ writable, readable }, options)</h5>

<div class="note">
  The <code>pipeThrough</code> method provides a convenient, chainable way of <a>piping</a> this <a>readable stream</a>
  through a <a>transform stream</a> (or any other <code>{ writable, readable }</code> pair). It simply pipes the stream
  into the writable side of the supplied pair, and returns the readable side for further use.

  This method is intentionally generic; it does not require that its <b>this</b> value be a <code>ReadableStream</code>
  object. It also does not require that its <code>writable</code> argument be a <code>WritableStream</code> instance,
  or that its <code>readable</code> argument be a <code>ReadableStream</code> instance.
</div>

<ol>
  <li> Call-with-rethrow Invoke(<b>this</b>, <code>"pipeTo"</code>, «‍<var>writable</var>, <var>options</var>»).
  <li> Return <var>readable</var>.
</ol>

<div class="example">
  A typical example of constructing <a>pipe chain</a> using <code>pipeThrough</code> would look like

  <pre><code class="lang-javascript">
    httpResponseBody
      .pipeThrough(decompressorTransform)
      .pipeThrough(ignoreNonImageFilesTransform)
      .pipeTo(mediaGallery);
  </code></pre>
</div>

<h5 id="rs-pipe-to">pipeTo(dest, { preventClose, preventAbort, preventCancel } = {})</h5>

<div class="note">
  The <code>pipeTo</code> method <a lt="piping">pipes</a> this <a>readable stream</a> to a given <a>writable
  stream</a>. The way in which the piping process behaves under various error conditions can be customized with a
  number of passed options. It returns a promise that fulfills when the piping process completes successfully, or
  rejects if any errors were encountered.

  This method is intentionally generic; it does not require that its <b>this</b> value be a <code>ReadableStream</code>
  object.
</div>

The <code>pipeTo</code> method is one of the more complex methods, and is undergoing some revision and edge-case
bulletproofing before we write it up in prose.

For now, please consider the reference implementation normative:
<a href="https://github.com/whatwg/streams/blob/master/reference-implementation/lib/readable-stream.js">reference-implementation/lib/readable-stream.js</a>,
look for the <code>pipeTo</code> method.

<h5 id="rs-read">read()</h5>

<div class="note">
  The <code>read</code> method will return the next <a>chunk</a> from the stream's internal queue, if available. If
  this causes the queue to become empty, more data will be pulled from the <a>underlying source</a>.
</div>

<ol>
  <li> If IsReadableStream(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> If IsReadableStreamLocked(<b>this</b>) is <b>true</b>, throw a <b>TypeError</b> exception.
  <li> Return ReadFromReadableStream(this).
</ol>

<h3 id="reader-class">Class <code>ExclusiveStreamReader</code></h3>

<h4 id="reader-class-definition">Class Definition</h4>

<em>This section is non-normative.</em>

If one were to write the <code>ExclusiveStreamReader</code> class in something close to the syntax of [[!ECMASCRIPT]],
it would look like

<pre><code class="lang-javascript">
  class ExclusiveStreamReader {
    constructor(stream)

    get closed()
    get isActive()
    get ready()
    get state()

    cancel(reason)
    read()
    releaseLock()
  }
</code></pre>

<h4 id="reader-internal-slots">Internal Slots</h4>

Instances of <code>ExclusiveStreamReader</code> are created with the internal slots described in the following table:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[closedPromise]]
    <td>A promise returned by the reader's <code>closed</code> getter
  </tr>
  <tr>
    <td>\[[encapsulatedReadableStream]]
    <td>A <code>ReadableStream</code> instance that this reader encapsulates; also used for the
      <a href="#is-exclusive-stream-reader">IsExclusiveStreamReader</a> brand check
  </tr>
  <tr>
    <td>\[[readyPromise]]
    <td>A promise returned by the reader's <code>ready</code> getter
  </tr>
  <tr>
    <td>\[[state]]
    <td>A string returned by the reader's <code>state</code> getter
  </tr>
</table>

<h4 id="reader-constructor">new ExclusiveStreamReader(stream)</h4>

<ol>
  <li> If <var>stream</var> does not have a \[[readableStreamReader]] internal slot, throw a <b>TypeError</b> exception.
  <li> If IsReadableStreamLocked(<var>stream</var>) is <b>true</b>, throw a <b>TypeError</b> exception.
  <li> Assert: <var>stream</var>@\[[state]] is <code>"waiting"</code> or <code>"readable"</code>.
  <li> If <var>stream</var>@\[[state]] is <code>"readable"</code>, set <var>stream</var>@\[[readyPromise]] to a new
    promise.
  <li> Set <var>stream</var>@\[[readableStreamReader]] to <b>this</b>.
  <li> Set <b>this</b>@\[[state]] to <var>stream</var>@\[[state]].
  <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>, set <b>this</b>@\[[readyPromise]] to a new promise.
  <li> Otherwise, set <b>this</b>@\[[readyPromise]] to a new promise resolved with <b>undefined</b>.
  <li> Set <b>this</b>@\[[closedPromise]] to a new promise.
  <li> Set <b>this</b>@\[[encapsulatedReadableStream]] to <var>stream</var>.
</ol>

<h4 id="reader-prototype">Properties of the <code>ExclusiveStreamReader</code> Prototype</h4>

<h5 id="reader-closed">get closed</h5>

<div class="note">
  While the reader is <a lt="active reader">active</a>, the <code>closed</code> getter for a stream reader simply
  delegates to the encapsulated stream, to allow consumers to use the reader interface as they would the readable
  stream interface.
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b>
    exception.
  <li> Return <b>this</b>@\[[closedPromise]].
</ol>

<h5 id="reader-is-active">get isActive</h5>

<div class="note">
  The <code>isActive</code> getter returns whether or not the stream reader is currently
  <a lt="active reader">active</a>.
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> Return SameValue(<b>this</b>@\[[encapsulatedReadableStream]]@\[[readableStreamReader]], <b>this</b>).
</ol>

<h5 id="reader-ready">get ready</h5>

<div class="note">
  The <code>ready</code> getter behaves the same as that for the readable stream encapsulated by this reader, except
  that while the reader is <a lt="active reader">active</a>, the promise returned will reveal the stream's true
  state transitions. (In contrast, the stream itself does not signal any state transitions while
  <a lt="locked to a reader">locked</a>, giving off the appearance of being <code>"waiting"</code> for the
  duration.)
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b>
    exception.
  <li> Return <b>this</b>@\[[readyPromise]].
</ol>

<h5 id="reader-state">get state</h5>

<div class="note">
  The <code>state</code> getter behaves the same as that for the readable stream encapsulated by this reader, except
  that while the reader is <a lt="active reader">active</a>, it will reveal the stream's true state. (In contrast,
  the stream itself gives off the appearance of being <code>"waiting"</code> while it is
  <a lt="locked to a reader">locked</a>.)
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> Return <b>this</b>@\[[state]].
</ol>

<h5 id="reader-cancel">cancel(reason)</h5>

<div class="note">
  If the reader is <a lt="active reader">active</a>, the <code>cancel</code> method behaves the same as that for the
  encapsulated stream. When done, it automatically <a lt="release a read lock">releases the lock</a>.
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b>
    exception.
  <li> If SameValue(<b>this</b>@\[[encapsulatedReadableStream]]@\[[readableStreamReader]], <b>this</b>) is
    <b>false</b>, return <b>this</b>@\[[closedPromise]].
  <li> Call-with-rethrow CancelReadableStream(<b>this</b>@\[[encapsulatedReadableStream]], <var>reason</var>).
</ol>

<h5 id="reader-read">read()</h5>

<div class="note">
  If the reader is <a lt="active reader">active</a>, the <code>read</code> method behaves the same as that for the
  encapsulated stream, except that the reader will be able to use its exclusive access to the stream to retrieve
  <a>chunks</a>. (In contrast, the stream itself will not allow any chunks to be read from it while it is
  <a lt="locked to a reader">locked</a>.)
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> If SameValue(<b>this</b>@\[[encapsulatedReadableStream]]@\[[readableStreamReader]], <b>this</b>) is
    <b>false</b>, throw a <b>TypeError</b> exception.
  <li> Return ReadFromReadableStream(<b>this</b>@\[[encapsulatedReadableStream]]).
</ol>

<h5 id="reader-release-lock">releaseLock()</h5>

<div class="note">
  The <code>releaseLock</code> method <a lt="release a read lock">releases the reader's lock</a> on the encapsulated
  stream. After the lock is released, the reader is no longer <a lt="active reader">active</a>. If the encapsulated
  stream is errored when the lock is released, the reader will appear errored in the same way from now on; otherwise,
  the reader will appear closed.
</div>

<ol>
  <li> If IsExclusiveStreamReader(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> If SameValue(<b>this</b>@\[[encapsulatedReadableStream]]@\[[readableStreamReader]], <b>this</b>) is
    <b>false</b>, return <b>undefined</b>.
  <li> Assert: <b>this</b>@\[[state]] is <code>"waiting"</code> or <code>"readable"</code>.
  <li> Call-with-rethrow CloseReadableStreamReader(<b>this</b>).
  <li> If <b>this</b>@\[[encapsulatedReadableStream]]@\[[state]] is <code>"readable"</code>, resolve
    <b>this</b>@\[[encapsulatedReadableStream]]@\[[readyPromise]] with <b>undefined</b>.
  <li> Set <b>this</b>@\[[encapsulatedReadableStream]]@\[[readableStreamReader]] to <b>undefined</b>.
</ol>

<h3 id="rs-abstract-ops">Readable Stream Abstract Operations</h3>

<h4 id="acquire-exclusive-stream-reader">AcquireExclusiveStreamReader ( stream )</h4>

<div class="note">
  This abstract operation is meant to be called from other specifications that may wish to acquire an
  <a>exclusive stream reader</a> for a given stream. Within this specification, it is only used once, in the definition
  of <a href="#rs-get-reader"><code>ReadableStream.prototype.getReader</code></a>.
</div>

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"closed"</code>, throw a <b>TypeError</b> exception.
  <li> If <var>stream</var>@\[[state]] is <code>"errored"</code>, throw <var>stream</var>@\[[storedError]].
  <li> Return Construct(<code>ExclusiveStreamReader</code>, «‍<var>stream</var>»).
</ol>

<h4 id="call-readable-stream-pull">CallReadableStreamPull ( stream )</h4>

<ol>
  <li> If <var>stream</var>@\[[draining]] is <b>true</b> or <var>stream</var>@\[[started]] is <b>false</b> or
    <var>stream</var>@\[[state]] is <code>"closed"</code> or <var>stream</var>@\[[state]] is <code>"errored"</code> or
    <var>stream</var>@\[[pullScheduled]] is <b>true</b>, return <b>undefined</b>.
  <li> If <var>stream</var>@\[[pullingPromise]] is not <b>undefined</b>,
    <ol>
      <li> Set <var>stream</var>@\[[pullScheduled]] to <b>true</b>.
      <li> Upon fulfillment of <var>stream</var>@\[[pullingPromise]],
        <ol>
          <li> Set <var>stream</var>@\[[pullScheduled]] to <b>false</b>.
          <li> Call-with-rethrow CallReadableStreamPull(<var>stream</var>).
        </ol>
      <li> Return <b>undefined</b>.
    </ol>
  <li> Let <var>shouldApplyBackpressure</var> be ShouldReadableStreamApplyBackpressure(<var>stream</var>).
  <li> If <var>shouldApplyBackpressure</var> is <b>true</b>, return <b>undefined</b>.
  <li> Set <var>stream</var>@\[[pullingPromise]] to PromiseInvokeOrNoop(<var>stream</var>@\[[underlyingSource]],
    <code>"pull"</code>, «‍<var>stream</var>@\[[enqueue]], <var>stream</var>@\[[close]]»).
  <li> Upon fulfillment of <var>stream</var>@\[[pullingPromise]], set <var>stream</var>@\[[pullingPromise]] to
    <b>undefined</b>.
  <li> Upon rejection of <var>stream</var>@\[[pullingPromise]] with reason <var>e</var>, call-with-rethrow
    <var>stream</var>@\[[error]](<var>e</var>).
  <li> Return <b>undefined</b>.
</ol>

<h4 id="cancel-readable-stream">CancelReadableStream ( stream )</h4>

<ol>
  <li> If <b>this</b>@\[[state]] is <code>"closed"</code> or <code>"errored"</code>, return
    <b>this</b>@\[[closedPromise]].
  <li> Let <b>this</b>@\[[queue]] be a new empty List.
  <li> Call-with-rethrow CloseReadableStream(<var>stream</var>).
  <li> Let <var>sourceCancelPromise</var> be PromiseInvokeOrNoop(<b>this</b>@\[[underlyingSource]],
    <code>"cancel"</code>, «‍<var>reason</var>»).
  <li> Return the result of transforming <var>sourceCancelPromise</var> by a fulfillment handler that returns
    <b>undefined</b>.
</ol>

<h4 id="close-readable-stream">CloseReadableStream ( stream )</h4>

<ol>
  <li> If IsReadableStreamLocked(<var>stream</var>) is <b>true</b>,
    <ol>
      <li> Call-with-rethrow CloseReadableStreamReader(<var>stream</var>@\[[readableStreamReader]]).
      <li> Set <var>stream</var>@\[[readableStreamReader]] to <b>undefined</b>
      <li> Resolve <var>stream</var>@\[[readyPromise]] with <b>undefined</b>.
    </ol>
  <li> Otherwise,
    <ol>
      <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>, resolve <var>stream</var>@\[[readyPromise]] with
        <b>undefined</b>.
    </ol>
  <li> Resolve <var>stream</var>@\[[closedPromise]] with <b>undefined</b>.
  <li> Set <var>stream</var>@\[[state]] to <code>"closed"</code>.
  <li> Return <b>undefined</b>.
</ol>

<h4 id="close-readable-stream-reader">CloseReadableStreamReader ( reader )</h4>

<ol>
  <li> If <var>reader</var>@\[[state]] is <code>"waiting"</code>, resolve <var>reader</var>@\[[readyPromise]] with
    <b>undefined</b>.
  <li> Resolve <var>reader</var>@\[[closedPromise]] with <b>undefined</b>.
  <li> Set <var>reader</var>@\[[state]] to <code>"closed"</code>.
</ol>

<h4 id="create-readable-stream-close-function">CreateReadableStreamCloseFunction ( stream )</h4>

<ol>
  <li> Return a new <a>Readable Stream Close Function</a> closing over <var>stream</var>.
</ol>

A <dfn>Readable Stream Close Function</dfn> is a built-in anonymous function of zero arguments, closing over a variable
<var>stream</var>, that performs the following steps:

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>,
    <ol>
      <li> Call-with-rethrow CloseReadableStream(<b>this</b>).
    </ol>
  <li> If <var>stream</var>@\[[state]] is <code>"readable"</code>,
    <ol>
      <li> Set <var>stream</var>@\[[draining]] to <b>true</b>.
    </ol>
</ol>

<h4 id="create-readable-stream-enqueue-function">CreateReadableStreamEnqueueFunction ( stream )</h4>

<ol>
  <li> Return a new <a>Readable Stream Enqueue Function</a> closing over <var>stream</var>.
</ol>

A <dfn>Readable Stream Enqueue Function</dfn> is a built-in anonymous function of one argument <var>chunk</var>,
closing over a variable <var>stream</var>, that performs the following steps:

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"errored"</code>, throw <var>stream</var>@\[[storedError]].
  <li> If <var>stream</var>@\[[state]] is <code>"closed"</code>, throw a <b>TypeError</b> exception.
  <li> If <var>stream</var>@\[[draining]] is <b>true</b>, throw a <b>TypeError</b> exception.
  <li> Let <var>chunkSize</var> be <b>1</b>.
  <li> Let <var>strategy</var> be Get(<var>stream</var>@\[[underlyingSource]], <code>"strategy"</code>).
  <li> If <var>strategy</var> is an abrupt completion,
    <ol>
      <li> Call-with-rethrow Call(<var>stream</var>@\[[error]], <b>undefined</b>, «‍<var>strategy</var>.\[[value]]»).
      <li> Return <var>strategy</var>.
    </ol>
  <li> Let <var>strategy</var> be <var>strategy</var>.\[[value]].
  <li> If <var>strategy</var> is not <b>undefined</b>, then
    <ol>
      <li> Set <var>chunkSize</var> to Invoke(<var>strategy</var>, <code>"size"</code>, «‍<var>chunk</var>»).
      <li> If <var>chunkSize</var> is an abrupt completion,
        <ol>
          <li> Call-with-rethrow Call(<var>stream</var>@\[[error]], <b>undefined</b>,
            «‍<var>chunkSize</var>.\[[value]]»).
          <li> Return <var>chunkSize</var>.
        </ol>
      <li> Let <var>chunkSize</var> be <var>chunkSize</var>.\[[value]].
    </ol>
  <li>Let <var>enqueueResult</var> be EnqueueValueWithSize(<var>stream</var>@\[[queue]], <var>chunk</var>,
    <var>chunkSize</var>.\[[value]]).
  <li> If <var>enqueueResult</var> is an abrupt completion,
    <ol>
      <li> Call-with-rethrow Call(<var>stream</var>@\[[error]], <b>undefined</b>,
        «‍<var>enqueueResult</var>.\[[value]]»).
      <li> Return <var>enqueueResult</var>.
    </ol>
  <li> Let <var>shouldApplyBackpressure</var> be ShouldReadableStreamApplyBackpressure(<var>stream</var>).
  <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>,
    <ol>
      <li> Call-with-rethrow MarkReadableStreamReadable(<var>stream</var>).
    </ol>
  <li> If <var>shouldApplyBackpressure</var>.\[[value]] is <b>true</b>, return <b>false</b>.
  <li> Return <b>true</b>.
</ol>

<h4 id="create-readable-stream-error-function">CreateReadableStreamErrorFunction ( stream )</h4>

<ol>
  <li> Return a new <a>Readable Stream Error Function</a> closing over <var>stream</var>.
</ol>

A <dfn>Readable Stream Error Function</dfn> is a built-in anonymous function of one argument <var>e</var>, closing over
a variable <var>stream</var>, that performs the following steps:

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"closed"</code> or <code>"errored"</code>, return <b>undefined</b>.
  <li> If <var>stream</var>@\[[state]] is <code>"readable"</code>, let <var>stream</var>@\[[queue]] be a new empty List.
  <li> If IsReadableStreamLocked(<var>stream</var>) is <b>true</b>,
    <ol>
      <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>, resolve
        <var>stream</var>@\[[readableStreamReader]]@\[[readyPromise]] with <b>undefined</b>.
      <li> Resolve <var>stream</var>@\[[readyPromise]] with <b>undefined</b>.
      <li> Reject <var>stream</var>@\[[readableStreamReader]]@\[[closedPromise]] with <var>e</var>.
      <li> Set <var>stream</var>@\[[readableStreamReader]]@\[[state]] to <code>"errored"</code>.
      <li> Set <var>stream</var>@\[[readableStreamReader]] to <b>undefined</b>.
    </ol>
  <li> Otherwise,
    <ol>
      <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>, resolve <var>stream</var>@\[[readyPromise]] with
        <b>undefined</b>.
    </ol>
  <li> Reject <var>stream</var>@\[[closedPromise]] with <var>e</var>.
  <li> Set <var>stream</var>@\[[storedError]] to <var>e</var>.
  <li> Set <var>stream</var>@\[[state]] to <code>"errored"</code>.
</ol>

<h4 id="is-exclusive-stream-reader">IsExclusiveStreamReader ( x )</h4>

<ol>
  <li> If Type(<var>x</var>) is not Object, return <b>false</b>.
  <li> If <var>x</var> does not have a \[[encapsulatedReadableStream]] internal slot, return <b>false</b>.
  <li> Return <b>true</b>.
</ol>

<h4 id="is-readable-stream">IsReadableStream ( x )</h4>

<ol>
  <li> If Type(<var>x</var>) is not Object, return <b>false</b>.
  <li> If <var>x</var> does not have a \[[underlyingSource]] internal slot, return <b>false</b>.
  <li> Return <b>true</b>.
</ol>

<h4 id="is-readable-stream-locked">IsReadableStreamLocked ( stream )</h4>

<div class="note">
  This abstract operation is meant to be called from other specifications that may wish to query whether or not a
  readable stream is <a>locked to a reader</a>.
</div>

<ol>
  <li> Assert: IsReadableStream(<var>stream</var>) is <b>true</b>.
  <li> If <var>stream</var>@\[[readableStreamReader]] is <b>undefined</b>, return <b>false</b>.
  <li> Return <b>true</b>.
</ol>

<h4 id="mark-readable-stream-readable">MarkReadableStreamReadable ( stream )</h4>

<ol>
  <li> If IsReadableStreamLocked(<var>stream</var>) is <b>true</b>,
    <ol>
      <li> Resolve <var>stream</var>@\[[readableStreamReader]]@\[[readyPromise]] with <b>undefined</b>.
      <li> Set <var>stream</var>@\[[readableStreamReader]]@\[[state]] to <code>"readable"</code>.
    </ol>
  <li> Otherwise,
    <ol>
      <li> Resolve <var>stream</var>@\[[readyPromise]] with <b>undefined</b>.
    </ol>
  <li> Set <var>stream</var>@\[[state]] to <code>"readable"</code>.
  <li> Return <b>undefined</b>.
</ol>

<h4 id="mark-readable-stream-waiting">MarkReadableStreamWaiting ( stream )</h4>

<ol>
  <li> If IsReadableStreamLocked(<var>stream</var>) is <b>true</b>,
    <ol>
      <li> Set <var>stream</var>@\[[readableStreamReader]]@\[[readyPromise]] to a new promise.
      <li> Set <var>stream</var>@\[[readableStreamReader]]@\[[state]] to <code>"waiting"</code>.
    </ol>
  <li> Otherwise,
    <ol>
      <li> Set <var>stream</var>@\[[readyPromise]] to a new promise.
    </ol>
  <li> Set <var>stream</var>@\[[state]] to <code>"waiting"</code>.
  <li> Return <b>undefined</b>.
</ol>

<h4 id="read-from-readable-stream">ReadFromReadableStream ( stream )</h4>

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code> or <code>"closed"</code>, throw a <b>TypeError</b>
    exception.
  <li> If <var>stream</var>@\[[state]] is <code>"errored"</code>, throw <var>stream</var>@\[[storedError]].
  <li> Assert: <var>stream</var>@\[[state]] is <code>"readable"</code>.
  <li> Assert: <var>stream</var>@\[[queue]] is not empty.
  <li> Let <var>chunk</var> be DequeueValue(<var>stream</var>@\[[queue]]).
  <li> If <var>stream</var>@\[[queue]] is now empty,
    <ol>
      <li> If <var>stream</var>@\[[draining]] is <b>true</b>, call-with-rethrow CloseReadableStream(<var>stream</var>).
      <li> If <var>stream</var>@\[[draining]] is <b>false</b>, call-with-rethrow
        MarkReadableStreamWaiting(<var>stream</var>).
    </ol>
  <li> Call-with-rethrow CallReadableStreamPull(<var>stream</var>).
  <li> Return <var>chunk</var>.
</ol>

<h4 id="should-readable-stream-apply-backpressure">ShouldReadableStreamApplyBackpressure ( stream )</h4>

<ol>
  <li> Let <var>queueSize</var> be GetTotalQueueSize(<var>stream</var>@\[[queue]]).
  <li> ReturnIfAbrupt(<var>queueSize</var>).
  <li> Let <var>shouldApplyBackpressure</var> be <b>true</b> if <var>queueSize</var> > <b>1</b>, and <b>false</b>
    otherwise.
  <li> Let <var>strategy</var> be Get(<var>stream</var>@\[[underlyingSource]], <code>"strategy"</code>).
  <li> If <var>strategy</var> is an abrupt completion,
    <ol>
      <li> Call-with-rethrow Call(<var>stream</var>@\[[error]], <b>undefined</b>, «‍<var>strategy</var>.\[[value]]»).
      <li> Return <var>strategy</var>.
    </ol>
  <li> Let <var>strategy</var> be <var>strategy</var>.\[[value]].
  <li> If <var>strategy</var> is not <b>undefined</b>, then
    <ol>
      <li> Set <var>shouldApplyBackpressure</var> to ToBoolean(Invoke(<var>strategy</var>,
        <code>"shouldApplyBackpressure"</code>, «‍<var>queueSize</var>»)).
      <li> If <var>shouldApplyBackpressure</var> is an abrupt completion, call-with-rethrow
        Call(<var>stream</var>@\[[error]], <b>undefined</b>, «‍<var>shouldApplyBackpressure</var>.\[[value]]»).
    </ol>
  <li> Return <var>shouldApplyBackpressure</var>.
</ol>

<h2 id="ws">Writable Streams</h2>

<h3 id="ws-intro">Using Writable Streams</h3>

<div class="example">
  The usual way to write to a writable stream is to simply <a lt="piping">pipe</a> a <a>readable stream</a> to it.
  This ensures that <a>backpressure</a> is respected, so that if the writable stream's <a>underlying sink</a> is not
  able to accept data as fast as the readable stream can produce it, the readable stream is informed of this and has a
  chance to slow down its data production.

  <pre><code class="lang-javascript">
    readableStream.pipeTo(writableStream)
      .then(() => console.log("All data successfully written!"))
      .catch(e => console.error("Something went wrong!", e));
  </code></pre>
</div>

<div class="example">
  You can also write directly to writable streams using their <code>write()</code> and <code>close()</code> methods.
  Since writable streams queue any incoming writes, and take care internally to forward them to the <a>underlying
  sink</a> in sequence, you can indiscriminately write to a writable stream without much ceremony:

  <pre><code class="lang-javascript">
    function writeArrayToStream(array, writableStream) {
      array.forEach(chunk => writableStream.write(chunk));

      return writableStream.close();
    }

    writeArrayToStream([1, 2, 3, 4, 5], writableStream)
      .then(() => console.log("All done!"))
      .catch(e => console.error("Error with the stream: " + e));
  </code></pre>
</div>

<div class="example">
  In the previous example we only paid attention to the success or failure of the entire stream, by looking at the
  promise returned by its <code>close()</code> method. That promise (which can also be accessed using the
  <code>closed</code> getter) will reject if anything goes wrong with the stream—initializing it, writing to it, or
  closing it. And it will fulfill once the stream is successfully closed. Often this is all you care about.

  However, if you care about the success of writing a specific <a>chunk</a>, you can use the promise returned by the
  stream's <code>write()</code> method:

  <pre><code class="lang-javascript">
    writableStream.write("i am a chunk of data")
      .then(() => console.log("chunk successfully written!"))
      .catch(e => console.error(e));
  </code></pre>

  What "success" means is up to a given stream instance (or more precisely, its <a>underlying sink</a>) to decide. For
  example, for a file stream it could simply mean that the OS has accepted the write, and not necessarily that the
  chunk has been flushed to disk.
</div>

<h3 id="ws-class">Class <code>WritableStream</code></h3>

<h4 id="ws-class-definition">Class Definition</h4>

<em>This section is non-normative.</em>

If one were to write the <code>WritableStream</code> class in something close to the syntax of [[!ECMASCRIPT]], it
would look like


<pre><code class="lang-javascript">
  class WritableStream {
    constructor(underlyingSink = {})

    get closed()
    get ready()
    get state()

    abort(reason)
    close()
    write(chunk)
  }
</code></pre>

<h4 id="ws-internal-slots">Internal Slots</h4>

Instances of <code>WritableStream</code> are created with the internal slots described in the following table:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[closedPromise]]
    <td>A promise that becomes fulfilled when the stream becomes <code>"closed"</code>; returned by the
      <code>closed</code> getter
  </tr>
  <tr>
    <td>\[[error]]
    <td>A <a>Writable Stream Error Function</a> created with the ability to move this stream to an
      <code>"errored"</code> state
  </tr>
  <tr>
    <td>\[[queue]]
    <td>A List representing the stream's internal queue of pending writes
  </tr>
  <tr>
    <td>\[[started]]
    <td>A boolean flag indicating whether the <a>underlying sink</a> has finished starting
  </tr>
  <tr>
    <td>\[[startedPromise]]
    <td>A promise storing the result of starting the <a>underlying sink</a>, used to delay actions until that is
      complete
  </tr>
  <tr>
    <td>\[[state]]
    <td>A string containing the stream's current state; returned by the <code>state</code> getter
  </tr>
  <tr>
    <td>\[[storedError]]
    <td>A value indicating how the stream failed, to be given as a failure reason or exception when trying to operate
      on the stream while in the <code>"errored"</code> state
  </tr>
  <tr>
    <td>\[[readyPromise]]
    <td>A promise returned by the <code>ready</code> getter
  </tr>
  <tr>
    <td>\[[underlyingSink]]
    <td>An object representation of the stream's <a>underlying sink</a>, including its <a>queuing strategy</a>; also
      used for the <a href="#is-writable-stream">IsWritableStream</a> brand check
  </tr>
  <tr>
    <td>\[[writing]]
    <td>A boolean flag indicating whether the stream is currently writing to the <a>underlying sink</a>, used to
      prevent concurrent such writes
  </tr>
</table>

<h4 id="ws-constructor">new WritableStream(underlyingSink = {})</h4>

<div class="note">
  The <var>underlyingSink</var> object passed to the constructor can implement any of the following methods to govern
  how the constructed stream instance behaves:

  <ul>
    <li> <code>start(error)</code> is called immediately, and should perform any actions necessary to acquire
      access to the <a>underlying sink</a>. If this process is asynchronous, it can return a promise to signal success
      or failure.
    <li> <code>write(chunk)</code> is called when a new <a>chunk</a> of data is ready to be written to the
      <a>underlying sink</a>. It can return a promise to signal success or failure of the write operation. The stream
      implementation guarantees that this method will be called only after previous writes have succeeded, and never
      after <code>close</code> or <code>abort</code> is called.
    <li> <code>close()</code> is called after the producer signals that they are done writing chunks to the stream, and
      all queued-up writes successfully complete. It should perform any actions necessary to finalize writes to the
      <a>underlying sink</a>, and release access to it. If this process is asynchronous, it can return a promise to
      signal success or failure. The stream implementation guarantees that this method will be called only after all
      queued-up writes have succeeded.
    <li> <code>abort(reason)</code> is called when the producer signals they wish to abruptly close the stream
      and put it in an <code>"errored"</code> state. It should clean up any held resources, much like
      <code>close</code>, but perhaps with some custom handling. Unlike <code>close</code>, <var>abort</var> will be
      called even if writes are queued up; those <a>chunks</a> will be thrown away. If this process is asynchronous, it
      can return a promise to signal success or failure. If no abort method is passed, by default the
      <code>close</code> method will be called instead.
  </ul>

  The underlying sink can also have a <code>strategy</code> property containing a <a>queuing strategy</a> object with
  two methods <code>shouldApplyBackpressure(queueSize)</code> and <code>size(chunk)</code>. These could be instances of
  the built-in <code>CountQueuingStrategy</code> or <code>ByteLengthQueuingStrategy</code> classes, or custom strategy
  objects. By default, a strategy that applies backpressure whenever writing into a non-empty queue will be used.
</div>

<div class="note">
  Due to the way writable streams asynchronously close, it is possible for both <code>close</code> and
  <code>abort</code> to be called, in cases where the <a>producer</a> aborts the stream while it is in the
  <code>"closing"</code> state. Notably, since a stream always spends at least one turn in the <code>"closing"</code>
  state, code like <code>ws.close(); ws.abort(...);</code> will cause both to be called, even if the <code>close</code>
  method itself has no asynchronous behavior. A well-designed <a>underlying sink</a> object should be able to deal with
  this.
</div>

<ol>
  <li> Set <b>this</b>@\[[underlyingSink]] to <var>underlyingSink</var>.
  <li> Set <b>this</b>@\[[closedPromise]] to a new promise.
  <li> Set <b>this</b>@\[[readyPromise]] to a new promise resolved with <b>undefined</b>.
  <li> Set <b>this</b>@\[[queue]] to a new empty List.
  <li> Set <b>this</b>@\[[state]] to <code>"writable"</code>.
  <li> Set <b>this</b>@\[[started]] and <b>this</b>@\[[writing]] to <b>false</b>.
  <li> Set <b>this</b>@\[[error]] to CreateWritableStreamErrorFunction(<b>this</b>).
  <li> Call-with-rethrow SyncWritableStreamStateWithQueue(<b>this</b>).
  <li> Let <var>startResult</var> be InvokeOrNoop(<var>underlyingSink</var>, <code>"start"</code>,
    «‍<b>this</b>@\[[error]]»).
  <li> ReturnIfAbrupt(<var>startResult</var>).
  <li> Set <b>this</b>@\[[startedPromise]] to the result of resolving <var>startResult</var> as a promise.
    <ol>
      <li> Upon fulfillment,
        <ol>
          <li> Set <b>this</b>@\[[started]] to <b>true</b>.
          <li> Set <b>this</b>@\[[startedPromise]] to <b>undefined</b>.
        </ol>
      <li> Upon rejection with reason <var>r</var>, call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>,
        «‍<var>r</var>»).
    </ol>
</ol>

<h4 id="ws-prototype">Properties of the <code>WritableStream</code> Prototype</h4>

<h5 id="ws-closed">get closed</h5>

<div class="note">
  The <code>closed</code> getter returns a promise that will be fulfilled when the stream becomes closed, or rejected
  if it ever errors.
</div>

<ol>
  <li> If IsWritableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> Return <b>this</b>@\[[closedPromise]].
</ol>

<h5 id="ws-ready">get ready</h5>

<div class="note">
  The <code>ready</code> getter returns a promise that will be fulfilled when the stream transitions away from the
  <code>"waiting"</code> state to any other state. Once the stream transitions back to <code>"waiting"</code>, the
  getter will return a new promise that stays pending until the next state transition.

  In essence, this promise gives a signal as to when any backpressure has let up (or that the stream has been closed
  or errored).
</div>

<ol>
  <li> If IsWritableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> Return <b>this</b>@\[[readyPromise]].
</ol>

<h5 id="ws-state">get state</h5>

<div class="note">
  The <code>state</code> getter returns the state of the stream, which will be one of the following:

  <dl>
    <dt><code>"waiting"</code>
    <dd>The stream's internal queue is full; that is, the stream is
      exerting <a>backpressure</a>. Use <code>.ready</code> to be notified of when the pressure subsides.

    <dt><code>"writable"</code>
    <dd>The stream's internal queue is not full; call <code>.write()</code> until backpressure is exerted.

    <dt><code>"closing"</code>
    <dd>The stream's <code>.close()</code> method has been called, and a command to close is in the queue or
      being processed by the <a>underlying sink</a>; attempts to write will now fail.

    <dt><code>"closed"</code>
    <dd>The <a>underlying sink</a> has been closed; writing is no longer possible.

    <dt><code>"errored"</code>
    <dd>An error occurred interacting with the <a>underlying sink</a> or the stream has been aborted, so the stream is
      now dead.
  </dl>
</div>

<ol>
  <li> If IsWritableStream(<b>this</b>) is <b>false</b>, throw a <b>TypeError</b> exception.
  <li> Return <b>this</b>@\[[state]].
</ol>

<h5 id="ws-abort">abort(reason)</h5>

<div class="note">
  The <code>abort</code> method signals that the producer can no longer successfully write to the stream and it should
  be immediately moved to an <code>"errored"</code> state, with any queued-up writes discarded. This will also execute
  any abort mechanism of the <a>underlying sink</a>.
</div>

<ol>
  <li> If IsWritableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> If <b>this</b>@\[[state]] is <code>"closed"</code>, return a new promise resolved with <b>undefined</b>.
  <li> If <b>this</b>@\[[state]] is <code>"errored"</code>, return a new promise rejected with
    <b>this</b>@\[[storedError]].
  <li> Call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>, «‍reason»).
  <li> Let <var>sinkAbortPromise</var> be PromiseInvokeOrFallbackOrNoop(<b>this</b>@\[[underlyingSink]],
    <code>"abort"</code>, (<var>reason</var>), <code>"close"</code>, «‍»).
  <li> Return the result of transforming <var>sinkAbortPromise</var> by a fulfillment handler that returns <b>undefined</b>.
</ol>

<h5 id="ws-close">close()</h5>

<div class="note">
  The <code>close</code> method signals that the producer is done writing chunks to the stream and wishes to move the
  stream to a <code>"closed"</code> state. This queues an action to close the stream, such that once any currently
  queued-up writes complete, the close mechanism of the <a>underlying sink</a> will execute, releasing any held
  resources. In the meantime, the stream will be in a <code>"closing"</code> state.
</div>

<ol>
  <li> If IsWritableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> If <b>this</b>@\[[state]] is <code>"closing"</code> or <code>"closed"</code>, return a promise rejected with a
    <b>TypeError</b> exception.
  <li> If <b>this</b>@\[[state]] is <code>"errored"</code>, return a promise rejected with
    <b>this</b>@\[[storedError]].
  <li> If <b>this</b>@\[[state]] is <code>"waiting"</code>, resolve <b>this</b>@\[[readyPromise]] with <b>undefined</b>.
  <li> Set <b>this</b>@\[[state]] to <code>"closing"</code>
  <li> Call-with-rethrow EnqueueValueWithSize(<b>this</b>@\[[queue]], <code>"close"</code>, <b>0</b>).
  <li> Call-with-rethrow CallOrScheduleWritableStreamAdvanceQueue(<b>this</b>).
  <li>Return <b>this</b>@\[[closedPromise]].
</ol>

<h5 id="ws-write">write(chunk)</h5>

<div class="note">
  The <code>write</code> method adds a write to the stream's internal queue, instructing the stream to
  write the given <a>chunk</a> of data to the <a>underlying sink</a> once all other pending writes have finished
  successfully. It returns a promise that will be fulfilled or rejected depending on the success or failure of writing
  the chunk to the underlying sink.

  The impact of enqueuing this chunk will be immediately reflected in the stream's <code>state</code> property; in
  particular, if the internal queue is now full according to the stream's <a>queuing strategy</a>, the stream will
  exert backpressure by changing its state to <code>"waiting"</code>.
</div>

<ol>
  <li> If IsWritableStream(<b>this</b>) is <b>false</b>, return a promise rejected with a <b>TypeError</b> exception.
  <li> If <b>this</b>@\[[state]] is <code>"closing"</code> or <code>"closed"</code>, return a promise rejected with a
    <b>TypeError</b>.
  <li> If <b>this</b>@\[[state]] is <code>"errored"</code>, return a promise rejected with
    <b>this</b>@\[[storedError]].
  <li> Assert: <b>this</b>@\[[state]] is either <code>"waiting"</code> or <code>"writable"</code>.
  <li> Let <var>chunkSize</var> be <b>1</b>.
  <li> Let <var>strategy</var> be Get(<b>this</b>@\[[underlyingSink]], <code>"strategy"</code>).
  <li> If <var>strategy</var> is an abrupt completion,
    <ol>
      <li> Call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>, «‍<var>strategy</var>.\[[value]]»).
      <li> Return a new promise rejected with <var>strategy</var>.\[[value]].
    </ol>
  <li> Set <var>strategy</var> to <var>strategy</var>.\[[value]].
  <li> If <var>strategy</var> is not <b>undefined</b>, then
    <li> Set <var>chunkSize</var> to Invoke(<var>strategy</var>, <code>"size"</code>, «‍<var>chunk</var>»).
    <li> If <var>chunkSize</var> is an abrupt completion,
      <ol>
        <li> Call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>, «‍<var>chunkSize</var>.\[[value]]»).
        <li> Return a new promise rejected with <var>chunkSize</var>.\[[value]].
      </ol>
    </li>
    <li> Set <var>chunkSize</var> to <var>chunkSize</var>.\[[value]].
  <li> Let <var>promise</var> be a new promise.
  <li> Let <var>writeRecord</var> be Record{\[[promise]]: <var>promise</var>, \[[chunk]]: <var>chunk</var>}.
  <li> Let <var>enqueueResult</var> be EnqueueValueWithSize(<b>this</b>@\[[queue]], <var>writeRecord</var>,
    <var>chunkSize</var>).
  <li> If <var>enqueueResult</var> is an abrupt completion,
    <ol>
      <li> Call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>, «‍<var>enqueueResult</var>.\[[value]]»).
      <li> Return a new promise rejected with <var>enqueueResult</var>.\[[value]].
    </ol>
  </li>
  <li> Let <var>syncResult</var> be SyncWritableStreamStateWithQueue(<b>this</b>).
  <li> If <var>syncResult</var> is an abrupt completion,
    <ol>
      <li> Call-with-rethrow Call(<b>this</b>@\[[error]], <b>undefined</b>, «‍<var>syncResult</var>.\[[value]]»).
      <li> Return <var>promise</var>.
    </ol>
  </li>
  <li> Call-with-rethrow CallOrScheduleWritableStreamAdvanceQueue(<b>this</b>).
  <li> Return <var>promise</var>.
</ol>

<h3 id="ws-abstract-ops">Writable Stream Abstract Operations</h3>

<h4 id="call-or-schedule-writable-stream-advance-queue">CallOrScheduleWritableStreamAdvanceQueue ( stream )</h4>

<ol>
  <li> If <var>stream</var>@\[[started]] is <b>false</b>, then
    <ol>
      <li> Upon fulfillment of <var>stream</var>@\[[startedPromise]], call-with-rethrow
        WritableStreamAdvanceQueue(<var>stream</var>).
      <li> Return <b>undefined</b>.
    </ol>
  <li> Otherwise, return WritableStreamAdvanceQueue(<var>stream</var>).
</ol>

<h4 id="close-writable-stream">CloseWritableStream ( stream )</h4>

<ol>
  <li> Assert: <var>stream</var>@\[[state]] is <code>"closing"</code>.
  <li> Let <var>sinkClosePromise</var> be PromiseInvokeOrNoop(<var>stream</var>@\[[underlyingSink]],
    <code>"close"</code>).
    <ol>
      <li> Upon fulfillment,
        <ol>
          <li> If <var>stream</var>@\[[state]] is <code>"errored"</code>, return.
          <li> Assert: <var>stream</var>@\[[state]] is <code>"closing"</code>.
          <li> Resolve <var>stream</var>@\[[closedPromise]] with <b>undefined</b>.
          <li> Set <var>stream</var>@\[[state]] to <code>"closed"</code>.
        </ol>
      <li> Upon rejection with reason <var>r</var>, call-with-rethrow Call(<var>stream</var>@\[[error]],
        <b>undefined</b>, «‍<var>r</var>»).
    </ol>
  <li> Return <b>undefined</b>.
</ol>

<h4 id="create-writable-stream-error-function">CreateWritableStreamErrorFunction ( stream )</h4>

<ol>
  <li> Return a new <a>Writable Stream Error Function</a> closing over <var>stream</var>.
</ol>

A <dfn>Writable Stream Error Function</dfn> is a built-in anonymous function of one argument <var>e</var>, closing over
a variable <var>stream</var>, that performs the following steps:

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"closed"</code> or <code>"errored"</code>, return <b>undefined</b>.
  <li> Repeat while <var>stream</var>@\[[queue]] is not empty:
    <ol>
      <li> Let <var>writeRecord</var> be DequeueValue(<var>stream</var>@\[[queue]]).
      <li> If <var>writeRecord</var> is not <code>"close"</code>, reject <var>writeRecord</var>.\[[promise]] with
        <var>e</var>.
    </ol>
  <li> Set <var>stream</var>@\[[storedError]] to <var>e</var>.
  <li> If <var>stream</var>@\[[state]] is <code>"waiting"</code>, resolve <var>stream</var>@\[[readyPromise]] with
    <b>undefined</b>.
  <li> Reject <var>stream</var>@\[[closedPromise]] with <var>e</var>.
  <li> Set <var>stream</var>@\[[state]] to <code>"errored"</code>.
</ol>

<h4 id="is-writable-stream">IsWritableStream ( x )</h4>

<ol>
  <li> If Type(<var>x</var>) is not Object, return <b>false</b>.
  <li> If <var>x</var> does not have a \[[underlyingSink]] internal slot, return <b>false</b>.
  <li> Return <b>true</b>.
</ol>

<h4 id="sync-writable-stream-state-with-queue">SyncWritableStreamStateWithQueue ( stream )</h4>

<ol>
  <li> If <var>stream</var>@\[[state]] is <code>"closing"</code>, return <b>undefined</b>.
  <li> Assert: <var>stream</var>@\[[state]] is either <code>"writable"</code> or <code>"waiting"</code>.
  <li> Let <var>queueSize</var> be GetTotalQueueSize(<var>stream</var>@\[[queue]]).
  <li> ReturnIfAbrupt(<var>queueSize</var>).
  <li> Let <var>shouldApplyBackpressure</var> be <b>true</b> if <var>queueSize</var> > 0, and <b>false</b> otherwise.
  <li> Let <var>strategy</var> be Get(<var>stream</var>@\[[underlyingSink]], <code>"strategy"</code>).
  <li> ReturnIfAbrupt(<var>strategy</var>).
  <li> If <var>strategy</var> is not <b>undefined</b>, then
    <ol>
      <li> Set <var>shouldApplyBackpressure</var> to ToBoolean(Invoke(<var>strategy</var>,
        <code>"shouldApplyBackpressure"</code>, «‍<var>queueSize</var>»)).
      <li> ReturnIfAbrupt(<var>shouldApplyBackpressure</var>).
    </ol>
  <li> If <var>shouldApplyBackpressure</var> is <b>true</b> and <var>stream</var>@\[[state]] is
    <code>"writable"</code>, then
    <ol>
      <li> Set <var>stream</var>@\[[state]] to <code>"waiting"</code>.
      <li> Set <var>stream</var>@\[[readyPromise]] to a new promise.
    </ol>
  <li> If <var>shouldApplyBackpressure</var> is <b>false</b> and <var>stream</var>@\[[state]] is
    <code>"waiting"</code>, then
    <ol>
      <li> Set <var>stream</var>@\[[state]] to <code>"writable"</code>.
      <li> Resolve <var>stream</var>@\[[readyPromise]] with <b>undefined</b>.
    </ol>
  <li> Return <b>undefined</b>.
</ol>

<h4 id="writable-stream-advance-queue">WritableStreamAdvanceQueue ( stream )</h4>

<ol>
  <li> If <var>stream</var>@\[[queue]] is empty, or <var>stream</var>@\[[writing]] is <b>true</b>, return
    <b>undefined</b>.
  <li> Let <var>writeRecord</var> be PeekQueueValue(<var>stream</var>@\[[queue]]).
  <li> If <var>writeRecord</var> is <code>"close"</code>, then
    <ol>
      <li> Assert: <var>stream</var>@\[[state]] is <code>"closing"</code>.
      <li> DequeueValue(<var>stream</var>@\[[queue]]).
      <li> Assert: <var>stream</var>@\[[queue]] is now empty.
      <li> Return CloseWritableStream(<var>stream</var>).
    </ol>
  <li> Set <var>stream</var>@\[[writing]] to <b>true</b>.
  <li> Let <var>writeResult</var> be PromiseInvokeOrNoop(<var>stream</var>@\[[underlyingSink]], <code>"write"</code>,
    «<var>writeRecord</var>.\[[chunk]]»).
  <li> Upon fulfillment of <var>writeResult</var>,
    <ol>
      <li> If <var>stream</var>@\[[state]] is <code>"errored"</code>, return.
      <li> Set <var>stream</var>@\[[writing]] to <b>false</b>.
      <li> Resolve <var>writeRecord</var>.\[[promise]] with <b>undefined</b>.
      <li> DequeueValue(<var>stream</var>@\[[queue]]).
      <li> Let <var>syncResult</var> be SyncWritableStreamStateWithQueue(<var>stream</var>).
      <li> If <var>syncResult</var> is an abrupt completion, then call-with-rethrow Call(<var>stream</var>@\[[error]],
        <b>undefined</b>, «‍<var>syncResult</var>.\[[value]]»).
      <li> Otherwise, return WritableStreamAdvanceQueue(<var>stream</var>).
    </ol>
  <li> Upon rejection of <var>writeResult</var> with reason <var>r</var>, call-with-rethrow
    Call(<var>stream</var>@\[[error]], <b>undefined</b>, «‍<var>r</var>»).
</ol>

<h2 id="ts">Transform Streams</h2>

Transform streams have been developed in the testable implementation, but not yet re-encoded in spec language.
We are waiting to validate their design before doing so. In the meantime, see
<a href="https://github.com/whatwg/streams/blob/master/reference-implementation/lib/transform-stream.js">reference-implementation/lib/transform-stream.js</a>.


<h2 id="other-stuff">Other Stream APIs and Operations</h2>

<h3 id="blqs-class">Class <code>ByteLengthQueuingStrategy</code></h3>

A common <a>queuing strategy</a> when dealing with binary data is to wait until the accumulated <code>byteLength</code>
properties of the incoming chunks reaches a specified high-water mark. As such, this is provided as a built-in
<a>queuing strategy</a> that can be used when constructing streams.

<div class="example">
  When creating a <a>readable stream</a> or <a>writable stream</a>, you can supply a byte-length queuing strategy
  directly:

  <pre><code class="lang-javascript">
    const stream = new ReadableStream({
      ...,
      strategy: new ByteLengthQueuingStrategy({ highWaterMark: 16 * 1024 })
    });
  </code></pre>

  In this case, 16 KiB worth of <a>chunks</a> can be enqueued by the readable stream's <a>underlying source</a> before
  the readable stream implementation starts sending <a>backpressure</a> signals to the underlying source.

  <pre><code class="lang-javascript">
    const stream = new WritableStream({
      ...,
      strategy: new ByteLengthQueuingStrategy({ highWaterMark: 32 * 1024 })
    });
  </code></pre>

  In this case, 32 KiB worth of <a>chunks</a> can be accumulated in the writable stream's internal queue, waiting for
  previous writes to the <a>underlying sink</a> to finish, before the writable stream starts sending
  <a>backpressure</a> signals to any <a>producers</a>.
</div>

<h4 id="blqs-class-definition">Class Definition</h4>

<em>This section is non-normative.</em>

If one were to write the <code>ByteLengthQueuingStrategy</code> class in something close to the syntax of
[[!ECMASCRIPT]], it would look like

<pre><code class="lang-javascript">
  class ByteLengthQueuingStrategy {
    constructor({ highWaterMark })
    shouldApplyBackpressure(queueSize)
    size(chunk)
  }
</code></pre>

<h4 id="blqs-internal-slots">Internal Slots</h4>

Instances of <code>ByteLengthQueuingStrategy</code> are created with the internal slots described in the following
table:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[blqsHighWaterMark]]
    <td>A nonnegative number that determines when the strategy applies <a>backpressure</a>
  </tr>
</table>

<h4 id="blqs-constructor">new ByteLengthQueuingStrategy({ highWaterMark })</h4>

<div class="note">
  The constructor takes a nonnegative number for the high-water mark, and stores it for later use.
</div>

<ol>
  <li> Let <var>highWaterMark</var> be ToNumber(<var>highWaterMark</var>).
  <li> If <var>highWaterMark</var> is <b>NaN</b>, throw a <b>TypeError</b> exception.
  <li> If <var>highWaterMark</var> &lt; 0, throw a <b>RangeError</b> exception.
  <li> Set <b>this</b>@\[[blqsHighWaterMark]] to <var>highWaterMark</var>.
</ol>

<h4 id="blqs-prototype">Properties of the <code>ByteLengthQueuingStrategy</code> Prototype</h4>

<h5 id="blqs-should-apply-backpressure">shouldApplyBackpressure(queueSize)</h5>

<div class="note">
  The <code>shouldApplyBackpressure</code> method returns whether or not the given queue size is greater than the
  queuing strategy's high-water mark.
</div>

<ol>
  <li> If Type(<b>this</b>) is not Object, throw a <b>TypeError</b> exception.
  <li> If <b>this</b> does not have a \[[blqsHighWaterMark]] internal slot, throw a <b>TypeError</b> exception.
  <li> Let <var>queueSize</var> be ToNumber(<var>queueSize</var>).
  <li> If <var>queueSize</var> is <b>NaN</b>, return <b>false</b>.
  <li> Return <var>queueSize</var> > <b>this</b>@\[[blqsHighWaterMark]].
</ol>

<h5 id="blqs-size">size(chunk)</h5>

<div class="note">
  The <code>size</code> method returns the given chunk's <code>byteLength</code> property. (If the chunk doesn't have
  one, it will return <b>undefined</b>, causing the stream using this strategy to error.)

  This method is intentionally generic; it does not require that its <b>this</b> value be a
  <code>ByteLengthQueuingStrategy</code> object.
</div>

<ol>
  <li> Return Get(<var>chunk</var>, <code>"byteLength"</code>).
</ol>

<h3 id="cqs-class">Class <code>CountQueuingStrategy</code></h3>

A common <a>queuing strategy</a> when dealing with streams of generic objects is to simply count the number of chunks
that have been accumulated so far, waiting until this number reaches a specified high-water mark. As such, this
strategy is also provided out of the box.

<div class="example">
  When creating a <a>readable stream</a> or <a>writable stream</a>, you can supply a count queuing strategy directly:

  <pre><code class="lang-javascript">
    const stream = new ReadableStream({
      ...,
      strategy: new CountQueuingStrategy({ highWaterMark: 10 })
    });
  </code></pre>

  In this case, 10 <a>chunks</a> (of any kind) can be enqueued by the readable stream's <a>underlying source</a> before
  the readable stream implementation starts sending <a>backpressure</a> signals to the underlying source.

  <pre><code class="lang-javascript">
    const stream = new WritableStream({
      ...,
      strategy: new CountQueuingStrategy({ highWaterMark: 5 })
    });
  </code></pre>

  In this case, five <a>chunks</a> (of any kind) can be accumulated in the writable stream's internal queue, waiting
  for previous writes to the <a>underlying sink</a> to finish, before the writable stream starts sending
  <a>backpressure</a> signals to any <a>producers</a>.
</div>

<h4 id="cqs-class-definition">Class Definition</h4>

<em>This section is non-normative.</em>

If one were to write the <code>CountQueuingStrategy</code> class in something close to the syntax of [[!ECMASCRIPT]],
it would look like

<pre><code class="lang-javascript">
  class CountQueuingStrategy {
    constructor({ highWaterMark })
    shouldApplyBackpressure(queueSize)
    size()
  }
</code></pre>

<h4 id="cqs-internal-slots">Internal Slots</h4>

Instances of <code>CountQueuingStrategy</code> are created with the internal slots described in the following table:

<table>
  <thead>
    <tr>
      <th>Internal Slot</th>
      <th>Description (<em>non-normative</em>)</th>
    </tr>
  </thead>
  <tr>
    <td>\[[cqsHighWaterMark]]
    <td>A nonnegative number that determines when the strategy applies <a>backpressure</a>
  </tr>
</table>

<h4 id="cqs-constructor">new CountQueuingStrategy({ highWaterMark })</h4>

<div class="note">
  The constructor takes a nonnegative number for the high-water mark, and stores it for later use.
</div>

<ol>
  <li> Let <var>highWaterMark</var> be ToNumber(<var>highWaterMark</var>).
  <li> If <var>highWaterMark</var> is <b>NaN</b>, throw a <b>TypeError</b> exception.
  <li> If <var>highWaterMark</var> &lt; 0, throw a <b>RangeError</b> exception.
  <li> Set <b>this</b>@\[[cqsHighWaterMark]] to <var>highWaterMark</var>.
</ol>

<h4 id="cqs-prototype">Properties of the <code>CountQueuingStrategy</code> Prototype</h4>

<h5 id="cqs-should-apply-backpressure">shouldApplyBackpressure(queueSize)</h5>

<div class="note">
  The <code>shouldApplyBackpressure</code> method returns whether or not the given queue size is greater than the
  queuing strategy's high-water mark.
</div>

<ol>
  <li> If Type(<b>this</b>) is not Object, throw a <b>TypeError</b> exception.
  <li> If <b>this</b> does not have a \[[cqsHighWaterMark]] internal slot, throw a <b>TypeError</b> exception.
  <li> Let <var>queueSize</var> be ToNumber(<var>queueSize</var>).
  <li> If <var>queueSize</var> is <b>NaN</b>, return <b>false</b>.
  <li> Return <var>queueSize</var> > <b>this</b>@\[[cqsHighWaterMark]].
</ol>

<h5 id="cqs-size">size()</h5>

<div class="note">
  The <code>size</code> method returns one always, so that the total queue size is a count of the number of chunks in
  the queue.

  This method is intentionally generic; it does not require that its <b>this</b> value be a
  <code>CountQueuingStrategy</code> object.
</div>

<ol>
  <li> Return 1.
</ol>

<h3 id="queue-with-sizes">Queue-with-Sizes Operations</h3>

The streams in this specification use a "queue-with-sizes" data structure to store queued up values, along with their
determined sizes. A queue-with-sizes is a List of Records with \[[value]] and \[[size]] fields (although in
implementations it would of course be backed by a more efficient data structure).

A number of abstract operations are specified here to make working with queues-with-sizes more pleasant, and used
throughout the rest of this standard.

<h4 id="dequeue-value">DequeueValue ( queue )</h4>

<ol>
  <li> Assert: <var>queue</var> is not empty.
  <li> Let <var>pair</var> be the first element of queue.
  <li> Remove <var>pair</var> from <var>queue</var>, shifting all other elements downward (so that the second becomes
    the first, and so on).
  <li> Return <var>pair</var>.\[[value]].
</ol>

<h4 id="enqueue-value-with-size">EnqueueValueWithSize ( queue, value, size )</h4>

<ol>
  <li> Let <var>size</var> be ToNumber(<var>size</var>).
  <li> ReturnIfAbrupt(<var>size</var>).
  <li> If <var>size</var> is <b>NaN</b>, <b>+∞</b>, or <b>−∞</b>, throw a <b>RangeError</b> exception.
  <li> Append Record{\[[value]]: <var>value</var>, \[[size]]: <var>size</var>} as the last element of <var>queue</var>.
</ol>

<h4 id="get-total-queue-size">GetTotalQueueSize ( queue )</h4>

<ol>
  <li> Let <var>totalSize</var> be <b>0</b>.
  <li> Repeat for each Record{\[[value]], \[[size]]} <var>pair</var> that is an element of <var>queue</var>,
    <ol>
      <li> Assert: <var>pair</var>.\[[size]] is a finite, non-<b>NaN</b> number.
      <li> Add <var>pair</var>.\[[size]] to <var>totalSize</var>.
    </ol>
  <li> Return <var>totalSize</var>.
</ol>

<h4 id="peek-queue-value">PeekQueueValue ( queue )</h4>

<ol>
  <li> Assert: <var>queue</var> is not empty.
  <li> Let <var>pair</var> be the first element of <var>queue</var>.
  <li> Return <var>pair</var>.\[[value]].
</ol>

<h3 id="misc-abstract-ops">Miscellaneous Operations</h3>

A few abstract operations are used in this specification for utility purposes. We define them here.

<h4 id="invoke-or-noop">InvokeOrNoop ( O, P, args )</h4>

<div class="note">
  InvokeOrNoop is a slight modification of the [[!ECMASCRIPT]]
  <a href="https://people.mozilla.org/~jorendorff/es6-draft.html#sec-invoke">Invoke</a> abstract operation to return
  <b>undefined</b> when the method is not present.
</div>

<ol>
  <li> Assert: <var>P</var> is a valid property key.
  <li> If <var>args</var> was not passed, let <var>args</var> be a new empty List.
  <li> Let <var>method</var> be GetV(<var>O</var>, <var>P</var>).
  <li> ReturnIfAbrupt(<var>method</var>).
  <li> If <var>method</var> is <b>undefined</b>, return <b>undefined</b>.
  <li> Return Call(<var>method</var>, <var>O</var>, <var>args</var>).
</ol>

<h4 id="promise-invoke-or-fallback-or-noop">PromiseInvokeOrFallbackOrNoop ( O, P1, args1, P2, args2 )</h4>

<div class="note">
  PromiseInvokeOrFallbackOrNoop is a specialized version of
  <a href="http://www.w3.org/2001/tag/doc/promises-guide#promise-calling">promise-calling</a> that works on methods,
  calls a fallback method if the first method is not present, and returns a promise for <b>undefined</b> when neither
  method is not present.
</div>

<ol>
  <li> Assert: <var>P1</var> is a valid property key.
  <li> Assert: <var>P2</var> is a valid property key.
  <li> Let <var>method</var> be GetV(<var>O</var>, <var>P1</var>).
  <li> If <var>method</var> is an abrupt completion, return a new promise rejected with <var>method</var>.\[[value]].
  <li> Let <var>method</var> be <var>method</var>.\[[value]].
  <li> If <var>method</var> is <b>undefined</b>, return PromiseInvokeOrNoop(<var>O</var>, <var>P2</var>,
    <var>args2</var>).
  <li> Let <var>returnValue</var> be Call(<var>method</var>, <var>O</var>, <var>args1</var>).
  <li> If <var>returnValue</var> is an abrupt completion, return a new promise rejected with
    <var>returnValue</var>.\[[value]].
  <li> Otherwise, return a new promise resolved with <var>returnValue</var>.\[[value]].
</ol>

<h4 id="promise-invoke-or-noop">PromiseInvokeOrNoop ( O, P, args )</h4>

<div class="note">
  PromiseInvokeOrNoop is a specialized version of
  <a href="http://www.w3.org/2001/tag/doc/promises-guide#promise-calling">promise-calling</a> that both works on
  methods and returns a promise for <b>undefined</b> when the method is not present.
</div>

<ol>
  <li> Assert: <var>P</var> is a valid property key.
  <li> If <var>args</var> was not passed, let <var>args</var> be a new empty List.
  <li> Let <var>method</var> be GetV(<var>O</var>, <var>P</var>).
  <li> If <var>method</var> is an abrupt completion, return a new promise rejected with <var>method</var>.\[[value]].
  <li> Let <var>method</var> be <var>method</var>.\[[value]].
  <li> If <var>method</var> is <b>undefined</b>, return a new promise resolved with <b>undefined</b>.
  <li> Let <var>returnValue</var> be Call(<var>method</var>, <var>O</var>, <var>args</var>).
  <li> If <var>returnValue</var> is an abrupt completion, return a new promise rejected with
    <var>returnValue</var>.\[[value]].
  <li> Otherwise, return a new promise resolved with <var>returnValue</var>.\[[value]].
</ol>

<h2 id="globals">Global Properties</h2>

Ideally, this standard would add no new properties to the global object, instead relying on a standard ECMAScript
module. However, given that the specification for and implementation of modules in a browser environment is still in
flux, in the meantime the following properties must be exposed on the global object:

<ul>
  <li> <code>ReadableStream</code>
  <li> <code>WritableStream</code>
  <li> <code>ByteLengthQueuingStrategy</code>
  <li> <code>CountQueuingStrategy</code>
</ul>

In all cases the property must be a data property, with its value being the corresponding constructor defined in this
standard, and other attributes { \[[Writable]]: <b>true</b>, \[[Enumerable]]: <b>false</b>, \[[Configurable]]:
<b>true</b> }.

<div class="note">
  The <code>ExclusiveStreamReader</code> class is specifically <em>not</em> exposed, as while it does have a
  functioning constructor, instances should instead be created through the <code>getReader</code> method of a
  <code>ReadableStream</code> instance.
</div>

<div class="note">
  If by the time implementers begin implementing this standard, modules start becoming feasible in the relevant
  environments, then we should reconsider this requirement.
</div>

<h2 id="subclassing">Subclassing Streams</h2>

<em>This section is non-normative.</em>

Specific APIs may wish to subclass <code>ReadableStream</code> or <code>WritableStream</code> in order to provide
additional functionality. Examples would include:

<ul>
  <li>A file stream that is constructed from a filename, and includes file metadata</li>
  <li>A HTTP stream that is constructed from a URL, and includes header-accessing APIs</li>
  <li>A TCP stream that overrides <code>read</code>, <code>ready</code>, <code>cancel</code>, <code>state</code>, and
  <code>closed</code> to reflect and manipulate a kernel-level TCP buffer</li>
</ul>

The first two examples here could be expressed by allowing their constructors to call <code>super</code> with
appropriate functions that manipulate the stream's internal state. The latter takes a different approach, which gives
both more power and more responsibility: it requires that the author of that stream manually implement many of the
complex requirements baked into the readable stream state machine and the contract it presents to users.

Because streams only interact through their public API, all streams—whether subclassed or not—can coexist and
interoperate. For example, you can pipe to or from any of the above streams, without worrying what type of
implementation is under the covers, since they all provide the appropriate properties and methods.

<h2 id="creating-examples">Examples of Creating Streams</h2>

<em>This section, and all its subsections, are non-normative.</em>

The previous examples throughout the standard have focused on how to use streams. Here we show how to create a stream,
using the <code>ReadableStream</code> or <code>WritableStream</code> constructors.

<h3 id="example-rs-push-no-backpressure">A readable stream with an underlying push source (no backpressure support)</h3>

The following function creates <a>readable streams</a> that wrap web sockets [[HTML]], which are <a>push sources</a>
that do not support backpressure signals. It illustrates how, when adapting a push source, usually most of the work
happens in the <code>start</code> function.

<pre><code class="lang-javascript">
  function makeReadableWebSocketStream(url, protocols) {
    const ws = new WebSocket(url, protocols);
    ws.binaryType = "arraybuffer";

    return new ReadableStream({
      start(enqueue, close, error) {
        ws.onmessage = event => enqueue(event.data);
        ws.onend = close;
        ws.onerror = error;
      },

      cancel() {
        ws.close();
      }
    });
  }
</code></pre>

We can then use this function to create readable streams for a web socket, and pipe that stream to an arbitrary
writable stream:

<pre><code class="lang-javascript">
  const webSocketStream = makeReadableWebSocketStream("wss://example.com", 443);

  webSocketStream.pipeTo(writableStream)
    .then(() => console.log("All data successfully written!"))
    .catch(e => console.error("Something went wrong!", e));
</code></pre>

<h3 id="example-rs-push-backpressure">A readable stream with an underlying push source and backpressure support</h3>

The following function returns <a>readable streams</a> that wrap "backpressure sockets," which are hypothetical objects
that have the same API as web sockets, but also provide the ability to pause and resume the flow of data with their
<code>readStop</code> and <code>readStart</code> methods. In doing so, this example shows how to apply
<a>backpressure</a> to <a>underlying sources</a> that support it.

<pre><code class="lang-javascript">
  function makeReadableBackpressureSocketStream(host, port) {
    const socket = createBackpressureSocket(host, port);

    return new ReadableStream({
      start(enqueue, close, error) {
        socket.ondata = event => {
          if (!enqueue(event.data)) {
            // If enqueue returns false, the internal queue is full, so propagate
            // the backpressure signal to the underlying source.
            socket.readStop();
          }
        };

        socket.onend = close;
        socket.onerror = error;
      },

      pull() {
        // This is called if the internal queue has been emptied, but the
        // stream's consumer still wants more data. In that case, restart
        // the flow of data if we have previously paused it.
        socket.readStart();
      },

      cancel() {
        socket.close();
      }
    });
  }
</code></pre>

We can then use this function to create readable streams for such "backpressure sockets" in the same way we do for web
sockets. This time, however, when we pipe to a destination that cannot accept data as fast as the socket is producing
it, or if we leave the stream alone without reading from it for some time, a backpressure signal will be sent to the
socket.

<h3 id="example-rs-pull">A readable stream with an underlying pull source</h3>

The following function returns <a>readable streams</a> that wrap portions of the
<a href="https://iojs.org/api/fs.html">io.js file system API</a> (which themselves map fairly directly to C's
<code>fopen</code>, <code>fread</code>, and <code>fclose</code> trio). Files are a typical example of <a>pull
sources</a>. Note how in contrast to the examples with push sources, most of the work here happens on-demand in the
<code>pull</code> function, and not at startup time in the <code>start</code> function.

<pre><code class="lang-javascript">
  const fs = require("pr/fs"); // https://github.com/jden/pr
  const CHUNK_SIZE = 1024;

  function makeReadableFileStream(filename) {
    let fd;
    let position = 0;

    return new ReadableStream({
      start() {
        return fs.open(filename, "r").then(result => {
          fd = result;
        });
      },

      pull(enqueue, close) {
        const buffer = new ArrayBuffer(CHUNK_SIZE);

        return fs.read(fd, buffer, 0, CHUNK_SIZE, position).then(bytesRead => {
          if (bytesRead === 0) {
            return fs.close(fd).then(close);
          } else {
            position += bytesRead;
            enqueue(buffer);
          }
        });
      },

      cancel() {
        return fs.close(fd);
      }
    });
  }
</code></pre>

We can then create and use readable streams for files just as we could before for sockets.

<h3 id="example-ws-no-backpressure">A writable stream with no backpressure or success signals</h3>

The following function returns a <a>writable stream</a> that wraps a web socket [[HTML]]. Web sockets do not provide
any way to tell when a given chunk of data has been successfully sent, so this writable stream has no ability to
communicate <a>backpressure</a> signals or write success/failure to its <a>producers</a>. That is, it will always be in
the <code>"writable"</code> state, and the promise returned by its <code>write()</code> method will always fulfill
immediately.

<pre><code class="lang-javascript">
  function makeWritableWebSocketStream(url, protocols) {
    const ws = new WebSocket(url, protocols);

    return new WritableStream({
      start(error) {
        ws.onerror = error;
        return new Promise(resolve => ws.onopen = resolve);
      },

      write(chunk) {
        ws.send(chunk);
        // Return immediately, since the web socket gives us no way to tell
        // when the write completes.
      },

      close() {
        return new Promise((resolve, reject) => {
          ws.onclose = resolve;
          ws.close();
        });
      }
    });
  }
</code></pre>

We can then use this function to create writable streams for a web socket, and pipe an arbitrary readable stream to it:

<pre><code class="lang-javascript">
  const webSocketStream = makeWritableWebSocketStream("wss://example.com", 443);

  readableStream.pipeTo(webSocketStream)
    .then(() => console.log("All data successfully written!"))
    .catch(e => console.error("Something went wrong!", e));
</code></pre>

<h3 id="example-ws-backpressure">A writable stream with backpressure and success signals</h3>

The following function returns <a>writable streams</a> that wrap portions of the
<a href="https://iojs.org/api/fs.html">io.js file system API</a> (which themselves map fairly directly to C's
  <code>fopen</code>, <code>fwrite</code>, and <code>fclose</code> trio). Since the API we are wrapping provides
a way to tell when a given write succeeds, this stream will be able to communicate <a>backpressure</a> signals as well
as whether an individual write succeeded or failed.

<pre><code class="lang-javascript">
  const fs = require("pr/fs"); // https://github.com/jden/pr

  function makeWritableFileStream(filename) {
    let fd;

    return new WritableStream({
      start() {
        return fs.open(filename, "w").then(result => {
          fd = result;
        });
      },

      write(chunk) {
        return fs.write(fd, chunk, 0, chunk.length);
      }

      close() {
        return fs.close(fd);
      }
    });
  }
</code></pre>

We can then use this function to create a writable stream for a file, and write individual <a>chunks</a> of data to it:

<pre><code class="lang-javascript">
  const fileStream = makeWritableFileStream("/example/path/on/fs.txt");

  fileStream.write("To stream, or not to stream\n");
  fileStream.write("That is the question\n");

  fileStream.close()
    .then(() => console.log("chunks written and stream closed successfully!"))
    .catch(e => console.error(e));
</code></pre>

Note that if a particular call to <code>fs.write</code> takes a longer time, the returned promise will fulfill later.
In the meantime, additional writes can be queued up, which are stored in the stream's internal queue. The accumulation
of chunks in this queue can move the stream into a <code>"waiting"</code> state, which is a signal to <a>producers</a>
that they should back off and stop writing if possible.

The way in which the writable stream queues up writes is especially important in this case, since as stated in
<a href="https://iojs.org/api/fs.html#fs_fs_write_fd_data_position_encoding_callback">the documentation for
<code>fs.write</code></a>, "it is unsafe to use <code>fs.write</code> multiple times on the same file without waiting
for the [promise]." But we don't have to worry about that when writing the <code>makeWritableFileStream</code>
function, since the stream implementation guarantees that the <a>underlying sink</a>'s <code>write</code> method will
not be called until any promises returned by previous calls have fulfilled!

<h3 id="example-both">A { readable, writable } stream pair wrapping the same underlying resource</h3>

The following function returns an object of the form <code>{ readable, writable }</code>, with the
<code>readable</code> property containing a readable stream and the <code>writable</code> property containing a
writable stream, where both streams wrap the same underlying web socket resource. In essence, this combines
[[#example-rs-push-no-backpressure]] and [[#example-ws-no-backpressure]].

While doing so, it illustrates how you can use JavaScript classes to create reusable underlying sink and underlying
source abstractions.

<pre><code class="lang-javascript">
  function streamifyWebSocket(url, protocol) {
    const ws = new WebSocket(url, protocols);
    ws.binaryType = "arraybuffer";

    return {
      readable: new ReadableStream(new WebSocketSource(ws)),
      writable: new WritableStream(new WebSocketSink(ws))
    };
  }

  class WebSocketSource {
    constructor(ws) {
      this._ws = ws;
    }

    start(enqueue, close, error) {
      this._ws.onmessage = event => enqueue(event.data);
      this._ws.onend = close;
      this._ws.onerror = error;
    }

    cancel() {
      this._ws.close();
    }
  }

  class WebSocketSink {
    constructor(ws) {
      this._ws = ws;
    }

    start(error) {
      this._ws.onerror = error;
      return new Promise(resolve => this._ws.onopen = resolve);
    }

    write(chunk) {
      this._ws.send(chunk);
    }

    close() {
      return new Promise((resolve, reject) => {
        this._ws.onclose = resolve;
        this._ws.close();
      });
    }
  });
</code></pre>

We can then use the objects created by this function to communicate with a remote web socket, using the standard stream
APIs:

<pre><code class="lang-javascript">
  const streamyWS = streamifyWebSocket("wss://example.com", 443);

  streamyWS.writable.write("Hello");
  streamyWS.writable.write("web socket!");

  streamyWS.readable.read().then(chunk => {
    console.log("The web socket says: ", chunk);
  });
</code></pre>

Note how in this setup canceling the <code>readable</code> side will implicitly close the <code>writable</code> side,
and similarly, closing or aborting the <code>writable</code> side will implicitly close the <code>readable</code> side.

<pre><code class="lang-javascript">
  streamyWS.writable.close().then(() => {
    assert(streamyWS.readable.state === "closed");
  });
</code></pre>


<h2 id="state-machines">State Machine Diagrams</h2>

<em>This section, and all its subsections, are non-normative.</em>

As explained in excruciating detail above, both readable and writable streams have fairly complex internal state
machines. In reaction to stimuli from various parts of the system, they transfer between several states. The public
<code>state</code> properties of each stream give a high-level overview of how developers should interact with the
rest of the stream's public API. However there are also a number of private flags used for tracking more subtle state
within the stream.

The diagrams in these sections aim to summarize, at least partially, the way in which readable and writable streams
transition between their states.

<h3 id="rs-state-diagram">The Readable Stream State Diagram</h3>

Readable streams transition in response to both actions from the <a>consumer</a> on the stream's public API, and
events instigated by the <a>underlying source</a> when the stream implementation calls the source's methods.

<figure>
  <img src="readable-stream.svg" width="670" alt="The readable stream state machine diagram." />

  <figcaption>
    <dl>
      <dt><span style="font-style: normal; font-weight: normal; font-family: monospace;">monospace</span></dt>
      <dd>Methods of the stream, called by consumers</dd>

      <dt><span style="font-style: normal; font-weight: bold;">bold</span></dt>
      <dd>Underlying source methods, called by the stream</dd>

      <dt><span style="font-style: italic; font-weight: normal;">italic</span></dt>
      <dd>Capabilities given to the underlying source, called by the underlying source methods</dd>
    </dl>
  </figcaption>
</figure>

<h3 id="ws-state-diagram">The Writable Stream State Diagram</h3>

TODO


<h2 id="conventions" class="no-num">Conventions</h2>

This specification uses algorithm conventions very similar to those of [[!ECMASCRIPT]]. However, it deviates in the
following ways, mostly for brevity. It is hoped (and vaguely planned) that eventually the conventions of ECMAScript
itself will evolve in these ways.

<ul>
  <li> We use destructuring notation in function and method declarations, and assume that the destructuring assignment
    procedure was performed before the algorithm starts.
  <li> We similarly use the default argument notation <code>= {}</code> in a couple of cases.
  <li> We use the notation <var>x</var>@\[[y]] to refer to internal slots of an object, instead of saying "the \[[y]]
    internal slot of <var>x</var>."
  <li> We do not alias <b>this</b> to a local variable in each algorithm, instead using it directly.
  <li> We use the phrase "call-with-rethrow AbstractOperation(<var>x</var>, <var>y</var>, <var>z</var>)" as a shorthand
    for "Let <var>opResult</var> be AbstractOperation(<var>x</var>, <var>y</var>, <var>z</var>).
    ReturnIfAbrupt(<var>opResult</var>)."
  <li> We use <a href="https://w3ctag.github.io/promises-guide/#shorthand-phrases">the shorthand phrases from the W3C
    TAG promises guide</a> to operate on promises at a higher level than the ECMAScript spec does.
  <li> We introduce the notion of creating a function that "closes over" a given variable. This is meant to work the
    same as how the ECMAScript spec gives such functions internal slots which get filled in upon creation and then
    have their values pulled out of during execution, but require less formal contortions.
</ul>

<h2 id="acks" class="no-num">Acknowledgments</h2>

The editor would like to thank
Tab Atkins,
Bert Belder,
Marcos Caceres,
Tim Caswell,
Brian di Palma,
Forbes Lindesay,
Thorsten Lorenz,
Calvin Metcalf,
Michael Mior,
Jens Nockert,
Trevor Norris,
Xabier Rodríguez,
HE Shi-Jun,
Dominic Tarr, and
tzik
for their contributions to this specification.

Special thanks to:
Will Chan for his help ensuring that the API allows high-performance network streaming,
Janessa Det for the logo,
Yutaka Hirano for his help with the exclusive reader design,
Gorgi Kosev for his breakthrough idea of separating piping into two methods, thus resolving
  <a href="https://github.com/whatwg/streams/issues/44">a major sticking point</a>;
Forrest Norvell for his enthusiastic iteration on the reference implementation;
Isaac Schlueter for his pioneering work on JavaScript streams in Node.js; and
Jake Verbaten for his continued involvement, support, and interest in pushing this spec forward.

This standard is written by <a href="https://domenic.me/">Domenic Denicola</a>
(<a href="https://google.com">Google</a>, <a href="mailto:d@domenic.me">d@domenic.me</a>) with substantial help from
Takeshi Yoshino (<a href="https://google.com">Google</a>,
<a href="mailto:tyoshino@chromium.org">tyoshino@chromium.org</a>).

Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent possible under law, the editor has waived all copyright and related or neighboring rights to this work.
